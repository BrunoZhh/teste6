import streamlit as st
import pandas as pd

st.title("Empresa de Manufaturas")

# Inicializa df
df = pd.DataFrame(columns=[
    "Data", "Turno", "M√°quina", "Pe√ßas Produzidas", "Pe√ßas Defeituosas"
])

# Upload CSV
dados = st.file_uploader("Carregar Arquivo da Empresa", type=['csv'])
if dados is not None:
    df = pd.read_csv(dados)
    df['Data'] = pd.to_datetime(df['Data'])

# Formul√°rio lateral
st.sidebar.header("Adicionar novo registro")
data = st.sidebar.date_input("Data")
turno = st.sidebar.selectbox("Turno", ["Manh√£", "Tarde", "Noite"])
maquina = st.sidebar.selectbox("M√°quina", ["Manual", "Semiautom√°tica", "Autom√°tica"])
pecas_produzidas = st.sidebar.number_input("Pe√ßas Produzidas", min_value=0)
pecas_defeituosas = st.sidebar.number_input("Pe√ßas Defeituosas", min_value=0)

if st.sidebar.button("Adicionar"):
    novo = pd.DataFrame({
        "Data": [pd.Timestamp(data)],
        "Turno": [turno],
        "M√°quina": [maquina],
        "Pe√ßas Produzidas": [pecas_produzidas],
        "Pe√ßas Defeituosas": [pecas_defeituosas]
    })
    df = pd.concat([df, novo], ignore_index=True)
    st.success("‚úÖ Registro adicionado!")

# Tabela edit√°vel
st.subheader("Produ√ß√£o")
df = st.data_editor(df, num_rows="dynamic")

# Se houver dados, c√°lculos
if not df.empty:
    # Total de pe√ßas boas
    df['Total'] = df['Pe√ßas Produzidas'] - df['Pe√ßas Defeituosas']

    # Efici√™ncia (%) com prote√ß√£o contra divis√£o por zero
    df['Efici√™ncia (%)'] = (df['Total'] / df['Pe√ßas Produzidas'] * 100).fillna(0).round(1)

    # Taxa de defeitos (%) com prote√ß√£o contra divis√£o por zero
    df['Taxa de Defeitos (%)'] = (df['Pe√ßas Defeituosas'] / df['Pe√ßas Produzidas'] * 100).fillna(0).round(1)

    # Efici√™ncia por dia
    eficiencia = df.groupby('Data').sum().reset_index()
    eficiencia['Efici√™ncia por dia (%)'] = (eficiencia['Total'] / eficiencia['Pe√ßas Produzidas'] * 100).fillna(0).round(1)

    # Produ√ß√£o abaixo de 80
    producao_baixa = df[df['Pe√ßas Produzidas'] < 80]

    # Efici√™ncia por dia menor que 90%
    eficiencia_baixa = eficiencia[eficiencia['Efici√™ncia por dia (%)'] < 90]

# Escolha entre c√°lculos ou gr√°ficos
escolha = st.radio("O que deseja ver?", ("C√°lculos e Alertas", "Gr√°ficos"))

if escolha == "C√°lculos e Alertas":
    st.subheader("Tabela de Produ√ß√£o")
    st.dataframe(df.assign(Data=df['Data'].dt.strftime("%Y-%m-%d")))

    if not producao_baixa.empty:
        st.error("‚ö†Ô∏è Produ√ß√£o abaixo de 80 pe√ßas:")
        st.dataframe(producao_baixa[['Data','Turno','M√°quina','Pe√ßas Produzidas']].assign(Data=lambda x: x['Data'].dt.strftime("%Y-%m-%d")))

    st.subheader("Efici√™ncia por dia (%)")
    st.dataframe(eficiencia.assign(Data=eficiencia['Data'].dt.strftime("%Y-%m-%d"))[['Data','Pe√ßas Produzidas','Total','Efici√™ncia por dia (%)']])

    if not eficiencia_baixa.empty:
        st.error("‚ö†Ô∏è Alguns dias tiveram efici√™ncia por dia menor que 90%")

if escolha == "Gr√°ficos":
    st.subheader("Produ√ß√£o di√°ria por m√°quina")
    graf1 = df.groupby(['Data','M√°quina'])['Pe√ßas Produzidas'].sum().unstack(fill_value=0)
    st.bar_chart(graf1)

    st.subheader("Efici√™ncia m√©dia por m√°quina")
    graf2 = df.groupby('M√°quina')['Efici√™ncia (%)'].mean()
    st.bar_chart(graf2)

    st.subheader("Taxa m√©dia de defeitos por dia")
    graf3 = df.groupby('Data')['Taxa de Defeitos (%)'].mean()
    st.line_chart(graf3)

# Salvar CSV
if st.button("üíæ Salvar"):
    df.to_csv("C:\Senai\Empresa.csv", index=False)
    st.success("‚úÖ Dados salvos em C:/Senai/Empresa.csv")

